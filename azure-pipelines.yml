# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: InstallSSHKey@0
      displayName: Install SSH Key
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDM+zJHMM8CGFxAw65g0W0/gg1bkCtAQgREVtXV8lclanDVSgDDSfmDKXtPeL+ZvOx8j/AHudKNtGvRnucDb0qatMdU/HRGiw66KhGsNe1jqsHIVD8T9qOBvMGKpQwSS9GOoAI0BVGdAxDuxOlnp6E7MbB5d7TVcTapAgberY0PxQ38gpQdA43kStR14E13icbpCTbLNlqXXOBQouS56BTwW21oYCrKRl98q0auvdBzWww/xFGms7jorzjOGVqNj8fawA21G6X1zhLGeE5yuMTZYllucHy97Fq7Ep7ADpWK1EG96/a3wVikc0byW/YZXK1bZqa+ZF7qPN4Yv8uxIob9 stephen@cc-0f53-c91c10a4-7494f6474d-p9tgb'
        sshKeySecureFile: 'az_sjg'
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.0.2'
    - task: TerraformTaskV2@2
      displayName: Initialize Terraform
      env:
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'tamopstf'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate21911'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: 'terraform'
    - task: TerraformTaskV2@2
      displayName: Check Terraform Plan
      env:
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'tamopstf'
        workingDirectory: 'terraform'
    - task: TerraformTaskV2@2
      displayName: Apply Terraform Plan
      env:
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: 'tamopstf'
        workingDirectory: 'terraform'
    - task: AzureRmWebAppDeployment@4
      displayName: Deploy WebApp fakerestapi
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'tamopstf'
        appType: 'webAppLinux'
        WebAppName: 'sjg-udacity-newapp7-AppService'
        packageForLinux: '$(System.DefaultWorkingDirectory)/fakerestapi.zip'
    - task: ArchiveFiles@2
      displayName: Archive Selenium Tests from Github
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Pipeline.Workspace)/selenium.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium Tests as Pipeline Artifacts
      inputs:
        targetPath: '$(Pipeline.Workspace)/selenium.zip'
        artifact: 'selenium'
        publishLocation: 'pipeline'
    - task: ArchiveFiles@2
      displayName: Archive Jmeter Tests from Github
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Pipeline.Workspace)/jmeter.zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      displayName: Publish Jmeter Tests as Pipeline Artifacts
      inputs:
        targetPath: '$(Pipeline.Workspace)/jmeter.zip'
        artifact: 'jmeter'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: Deploy VM in TEST Environment
  jobs:
  - deployment: VMDeploy
    displayName: VM Deploy
    pool:
      vmImage: 'Ubuntu-18.04'
    environment:
      name: TEST
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - script: mkdir test; hostname; uname -a

- stage: Testing
  jobs:
  - job: Testing
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDM+zJHMM8CGFxAw65g0W0/gg1bkCtAQgREVtXV8lclanDVSgDDSfmDKXtPeL+ZvOx8j/AHudKNtGvRnucDb0qatMdU/HRGiw66KhGsNe1jqsHIVD8T9qOBvMGKpQwSS9GOoAI0BVGdAxDuxOlnp6E7MbB5d7TVcTapAgberY0PxQ38gpQdA43kStR14E13icbpCTbLNlqXXOBQouS56BTwW21oYCrKRl98q0auvdBzWww/xFGms7jorzjOGVqNj8fawA21G6X1zhLGeE5yuMTZYllucHy97Fq7Ep7ADpWK1EG96/a3wVikc0byW/YZXK1bZqa+ZF7qPN4Yv8uxIob9 stephen@cc-0f53-c91c10a4-7494f6474d-p9tgb'
        sshKeySecureFile: 'az_sjg'
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: |
          sudo npm install -g newman
    - task: CmdLine@2
      displayName: Execute postman Regression Test
      inputs:
        script: |
          newman run -x regression-test.postman_collection_sjg --reporters cli,junit --reporter-junit-export log_postman_regression_test.xml
          ls -l
        workingDirectory: 'automatedtesting/postman'
    - task: PublishTestResults@2
      displayName: Publish postman Regression Test Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'automatedtesting/postman/log_postman_regression_test.xml'
    - task: CmdLine@2
      displayName: Execute postman Data Validation Test
      inputs:
        script: |
          newman run -x data-validation-test.postman_collection_sjg --reporters cli,junit --reporter-junit-export log_postman_data_validation_test.xml
          ls -l
        workingDirectory: 'automatedtesting/postman'
    - task: PublishTestResults@2
      displayName: Publish postman Data Validation Test Results
      inputs:
        testResultsFormat: 'Junit'
        testResultsFiles: 'automatedtesting/postman/log_postman_data_validation_test.xml'

  - deployment: VMDeploy
    displayName: Install selenium and jmeter; Run UI and Performance Tests
    environment:
      name: "TEST"
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: Install Selenium and Test Suite
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                hostname
                uname -a
                sudo apt-get install software-properties-common -y
                sudo apt-add-repository universe -y
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install chromium-browser -y
                sudo apt-get install chromium-driver -y
                python3 -m pip install --upgrade pip
                pip3 install selenium
                /usr/bin/chromedriver --version
                echo "Contents of Pipeline Workspace"
                ls -l $(Pipeline.Workspace)
                unzip -o $(Pipeline.Workspace)/selenium/selenium.zip
          - task: Bash@3
            displayName: Run Selenium Tests
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                ls -l
                sudo python3 select.py 2>&1 | sudo tee -a selenium_ui_test.log
                cat selenium_ui_test.log
                cp selenium_ui_test.log $(Pipeline.Workspace)/selenium_ui_test.log
                # store log in public directory for LAW pickup
                sudo mkdir -p /var/log/selenium
                sudo chmod 777 /var/log/selenium
                sudo cp selenium_ui_test.log /var/log/selenium
                sudo chmod 666 /var/log/selenium/selenium_ui_test.log

          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium Test Results
            inputs:
              targetPath: '$(Pipeline.Workspace)/selenium_ui_test.txt'
              artifact: 'selenium_ui_test'
              publishLocation: 'pipeline'
          - task: Bash@3
            displayName: Install Jmeter and Test Suite
            inputs:
              targetType: 'inline'
              script: |
               #! /bin/bash

               sudo apt-get -y install zip
               sudo apt install openjdk-11-jre-headless -y
               wget http://apache.volia.net//jmeter/binaries/apache-jmeter-5.4.tgz
               tar -xf apache-jmeter-5.4.tgz
               ./apache-jmeter-5.4/bin/jmeter -v
               echo "Working Directory:"
               ls -l $(System.DefaultWorkingDirectory)
               echo "Pipeline Workspace:"
               ls -l $(Pipeline.Workspace)
               unzip -o $(Pipeline.Workspace)/jmeter/jmeter.zip
               mkdir -p jmeter/log
          - task: Bash@3
            displayName: Run Jmeter Stress and Endurance Tests
            inputs:
              targetType: 'inline'
              script: |
               #! /bin/bash

               echo "Stress Test"
               ./apache-jmeter-5.4/bin/jmeter -n -t stress-test-plan.jmx -l jmeter_log_stress_test.csv -e -o jmeter/log/stress_test_report
               echo "Stress Test Log"
               cat jmeter_log_stress_test.csv
               echo ""
               echo "Endurance Test"
               ./apache-jmeter-5.4/bin/jmeter -n -t endurance-test-plan.jmx -l jmeter_log_endurance_test.csv -e -o jmeter/log/endurance_test_report
               echo "Endurance Test Log"
               cat jmeter_log_endurance_test.csv
               echo ""
          - task: ArchiveFiles@2
            displayName: Archive Jmeter Stress Test Report
            inputs:
              rootFolderOrFile: 'jmeter/log/stress_test_report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/jmeter_stress_test_report.zip'
              replaceExistingArchive: true
          - task: PublishPipelineArtifact@1
            displayName: Publish Jmeter Stress Test Report
            inputs:
              targetPath: '$(Pipeline.Workspace)/jmeter_stress_test_report.zip'
              artifact: 'jmeter_stress_test_report'
              publishLocation: 'pipeline'
          - task: ArchiveFiles@2
            displayName: Archive Jmeter Endurance Test Report
            inputs:
              rootFolderOrFile: 'jmeter/log/endurance_test_report'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Pipeline.Workspace)/jmeter_endurance_test_report.zip'
              replaceExistingArchive: true
          - task: PublishPipelineArtifact@1
            displayName: Publish Jmeter Endurance Test Report
            inputs:
              targetPath: '$(Pipeline.Workspace)/jmeter_endurance_test_report.zip'
              artifact: 'jmeter_endurance_test_report'
              publishLocation: 'pipeline'
          - task: Bash@3
            displayName: Clean Up Test Reports
            inputs:
              targetType: 'inline'
              script: |
               #! /bin/bash

               rm -rf jmeter/log/stress_test_report
               rm -rf jmeter/log/ensurance_test_report
            
- stage: Destroy
  displayName: Destroy Terraform Infrastructure
  jobs:
  - job: Destroy
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDM+zJHMM8CGFxAw65g0W0/gg1bkCtAQgREVtXV8lclanDVSgDDSfmDKXtPeL+ZvOx8j/AHudKNtGvRnucDb0qatMdU/HRGiw66KhGsNe1jqsHIVD8T9qOBvMGKpQwSS9GOoAI0BVGdAxDuxOlnp6E7MbB5d7TVcTapAgberY0PxQ38gpQdA43kStR14E13icbpCTbLNlqXXOBQouS56BTwW21oYCrKRl98q0auvdBzWww/xFGms7jorzjOGVqNj8fawA21G6X1zhLGeE5yuMTZYllucHy97Fq7Ep7ADpWK1EG96/a3wVikc0byW/YZXK1bZqa+ZF7qPN4Yv8uxIob9 stephen@cc-0f53-c91c10a4-7494f6474d-p9tgb'
        sshKeySecureFile: 'az_sjg'
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '1.0.2'
    - task: TerraformTaskV2@2
      env:
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'tamopstf'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate21911'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: 'terraform'
    - task: TerraformTaskV2@2
      env:
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        environmentServiceNameAzureRM: 'tamopstf'
        workingDirectory: 'terraform'